void print(vi& sub) {
    
    for (int i = 0; i < 3; i++) {
        if (sub[i] != -1) cout << sub[i] << " ";

    }cout << endl;
}
void helper(vi& sub, vi& v, int pos) {
    if (pos == v.size()) {
        print(sub);
    }
    else {
        sub[pos] = -1;
        helper(sub, v, pos + 1);
        sub[pos] = v[pos];
        helper(sub, v, pos + 1);
    }
}
void subset(vi& v) {
    vi subset(3);
    helper(subset, v, 0);

}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    vi v(3);
    rep(i, 3) cin >> v[i];
    subset(v);
  
}
//time complexity-o(2^n)

using bitmask::
 vi v(3);
    rep(i, 3) cin >> v[i];
    vi sub[1 << 3];
    rep(b, (1 << 3)) {
        //vi sub;
        for (int i = 0; i < 3; i++) {
            if (b & (1 << i)) sub[b].push_back(v[i]);
        }
   }
    for (int i = 0; i < 8; i++) {
        for (auto c : sub[i]) cout << c << " ";
        cout << endl;
   }
   time complexity==(o(n*2^n));


//generating permutations
void print(vi& result) {
    aut(r, result) cout << r << " ";
    cout << endl;
}
void permutation(vi& v2, vi& count, vi& result, int level) {
    if (level == result.size()) { print(result); return; }
    else {
        rep(i, v2.size()) {
            if (count[i] == 0) continue;

            result[level] = v2[i];
            count[i]--;
            permutation(v2, count, result, level + 1);
            count[i]++;

        }
    }
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    vi v(4);
    rep(i, 4) cin >> v[i];
    unordered_map<int, int> mp;
    vi v2(all(v));
    ED(v2);
    print(v2);
    rep(i, 4) mp[v[i]]++;
    aut(r, mp) cout << r.ff << r.ss << " ";
    cout << endl;
   
    vi count(mp.size());
    rep(i, mp.size()) count[i] = mp[v2[i]];
    print(count);
    vi result(4);
    permutation(v2, count, result, 0);


  
}
///
smaller one
  do {
        print(v);
    } while (next_permutation(all(v)));

