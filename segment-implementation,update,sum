void build(int* tree, vi & v, int start, int end, int treenode) {
//note that start and end 
	if (start == end) {
		tree[treenode] = v[start];
		return;
	}
	int mid = (start + end) / 2;
	 build(tree, v, start, mid, 2*treenode);
	 build(tree, v, mid + 1, end, 2*treenode+1);
	tree[treenode] = tree[2 * treenode] + tree[2 * treenode + 1];
}
int sum(int a, int b,int* tree,int n) {
	a += n;
	b += n;
	int s = 0;
	while (a <= b) {
		if (a % 2 == 1) s += tree[a++];
		if (b % 2 == 0) s += tree[b--];
		a /= 2;
		b /= 2;
	}
	return s;
}
void update(int k, int x, int* tree, int n) {
	k += n;
	tree[k] += x;
	for (k /= 2; k >= 1; k /= 2) tree[k] = tree[2 * k] + tree[2 * k + 1];
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
	int n;
	cin >> n;
	vi v(n);
	rep(i, n) cin >> v[i];
	print(v);
	int* tree = new int[2 * n];
	build(tree, v, 0, n - 1, 1);
	reu(i,1, 2*n) cout << tree[i] << endl;
	int a, b;
	cin >> a >> b;
	cout<<sum(a, b, tree,n);
	int k;
	cin >> k;
	update(k, 5, tree, n);
	reu(i, 1, 2 * n) cout << tree[i] << endl;   
}
