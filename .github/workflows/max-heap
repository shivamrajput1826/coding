//max heapify
void max_heapify (int Arr[ ], int i, int N)
{
    int left = 2*i                   //left child
    int right = 2*i +1           //right child
    if(left<= N and Arr[left] > Arr[i] )
          largest = left;
    else
         largest = i;
    if(right <= N and Arr[right] > Arr[largest] )
        largest = right;
    if(largest != i )
    {
        swap (Ar[i] , Arr[largest]);
        max_heapify (Arr, largest,N);
    } 
 }
// complexity o(logn)

void build_maxheap (int Arr[ ])
{
    for(int i = N/2 ; i >= 1 ; i-- )
    {
        max_heapify (Arr, i) ;
    }
}
//From the above property we observed that elements from Arr[ N/2+1 ] to Arr[ N ] are leaf nodes,and each node is a 1 element heap
. We can use max_heapify function in a bottom up manner on remaining nodes, so that we can cover each node of tree.

